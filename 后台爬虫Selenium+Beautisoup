from selenium import webdriver
from selenium.webdriver.support.ui import Select
from selenium.webdriver.common.keys import Keys
#from selenium.webdriver.common.by import By
#from selenium.webdriver.support.ui import WebDriverWait
#from selenium.webdriver.support import expected_conditions as EC
from bs4 import BeautifulSoup
import pandas as pd
import time
from tqdm import tqdm
import math

#修改时间区
yday = "30"
month = "11"

np = "2020-{}-{} 00:00:00".format(month,yday)
nl = "2020-{}-{} 23:59:59".format(month,yday)
ynote = month + yday

# 使用 Chrome 的 WebDriver+浏览IP
options = webdriver.ChromeOptions()
options.add_argument(     
    '--user-agent=Mozilla/5.0 (Windows NT 10.0; Win64; x64)\
        AppleWebKit/537.36 (KHTML, like Gecko) Chrome/87.0.4280.88 Safari/537.36')
browser = webdriver.Chrome(executable_path=r'C:\Users\User\Desktop\chromedriver.exe',options=options)

#视窗最大化
browser.maximize_window()

#最大等待时间
browser.implicitly_wait(15)

# 開啟登入画面
browser.get("网址")

#登入画面一
#填入账号密码
#找name值
browser.find_element_by_name("name").send_keys("@@")
browser.find_element_by_name("pwd").send_keys("@@")
#验证码手动输入
browser.find_element_by_name("verifycode").send_keys(input())
#点击登入
#找XPath相对路径
browser.find_element_by_xpath("//button[@class='btn green pull-right']").click()

#登入画面二
#增加等待时间
time.sleep(1.5)
#填入账号密码
browser.find_element_by_name("sename").send_keys("@@")
browser.find_element_by_name("sepassword").send_keys("@@")
#输入Enter
browser.find_element_by_xpath("//div[@id='secureLoginModal']//button[@class='btn green pull-right']").send_keys(Keys.ENTER)

#选单点选
browser.find_element_by_xpath("/html/body/div[5]/div[1]/div/ul/li[6]/a").click()
time.sleep(2)
browser.find_element_by_link_text("@@").click()

def s_time():
    #页面
    browser.find_element_by_link_text("aa").click()
    #清空时间
    browser.find_elements_by_xpath("//input[@name='createdStart']")[3].clear()
    browser.find_elements_by_xpath("//input[@name='createdEnd']")[3].clear()
    browser.find_elements_by_xpath("//input[@name='auditStart']")[3].clear()
    browser.find_elements_by_xpath("//input[@name='auditEnd']")[3].clear()
    #处理时间
    browser.find_elements_by_xpath("//input[@name='auditStart']")[3].send_keys(np)
    browser.find_elements_by_xpath("//input[@name='auditEnd']")[3].send_keys(nl)
    #搜寻
    browser.find_elements_by_xpath("//button[@id='s_submit']")[3].click()
         
s_time()

#滚动向下
js="var q=document.documentElement.scrollTop=100000"  
browser.execute_script(js)

time.sleep(1)
#设置等待条件text
tt = browser.find_elements_by_class_name("pageload")[2].text

err = 0
#进度条
progress = tqdm(total=1600)
#强制等待
while browser.find_elements_by_class_name("pageload")[2].text == tt:
    if browser.find_elements_by_class_name("pageload")[2].text != tt:
        break
    else:
        #等待超时再点击页面刷新
        if err == 1600:
            #刷新progress
            progress = tqdm(total=1600)
            #滚动向上
            js="var q=document.documentElement.scrollTop=-100000"  
            browser.execute_script(js)  
            #刷新
            s_time()
            
            js="var q=document.documentElement.scrollTop=100000"  
            browser.execute_script(js)
            time.sleep(3)
            tt = browser.find_elements_by_class_name("pageload")[2].text
            err = 0
        progress.update(1)
        err+=1

#设置等待条件text
tt = browser.find_elements_by_class_name("pageload")[2].text

#选取1页显示100笔
Select(browser.find_element_by_xpath("//select[@name='data']")).select_by_value("100")

#等待
err = 0
progress = tqdm(total=1600)
while browser.find_elements_by_class_name("pageload")[2].text == tt:
    if browser.find_elements_by_class_name("pageload")[2].text != tt:
        break
    else:
        if err == 1600:
            Select(browser.find_element_by_xpath("//select[@name='data']")).select_by_value("50")
            Select(browser.find_element_by_xpath("//select[@name='data']")).select_by_value("100")
            progress = tqdm(total=1600)
            err = 0
        progress.update(1)
        err += 1
        
time.sleep(2)
#清除冗字，留下笔数数字
rangelist = browser.find_element_by_id('data3_info').text[-9:-4].replace(" ","").replace(",","").replace("共","").replace("/","")
#每100笔1页，无条件近位
lastpage = math.ceil(int(rangelist)/100)

#以BeautifulSoup抓取表格，汇入pandas，Selenium操作换页

list=[]
idlist=[] 
count = 0
page = 1 
progress = tqdm(total=int(rangelist))
def crawler():
    #设定全域变数
    global count
    global page
    
    while (count < int(rangelist)):
        js="var q=document.documentElement.scrollTop=100000"  
        browser.execute_script(js)
        tt = browser.find_element_by_xpath("//div[@id='data3_info']").text
        #读取selenium目前页面
        soup = BeautifulSoup(browser.page_source, 'lxml')
        #找标签为table且获取第几个表格
        table = soup.find_all('table')[5]
        #汇入DataFrame
        df = pd.read_html(str(table),header=0)
        #加到list内
        list.append(df[0])
        
        #以selenium抓取账号，修正BeautifulSoup抓取账号错误
        table = browser.find_element_by_xpath("//table[@id='data3']//tbody[@role='alert']")
        trlist = table.find_elements_by_tag_name('tr')
        for row in trlist:
            #遍历行对象，获取每一个行中所有的列对象
            tdlist = row.find_elements_by_tag_name('td')
            idlist.append(tdlist[1].text)
            progress.update(1)
            count += 1
        
        #最后一页不点击下一页
        if page != lastpage:            
            browser.find_element_by_link_text("后一页").click()        
            err = 0                     
            while browser.find_element_by_xpath("//div[@id='data3_info']").text == tt:
                if browser.find_element_by_xpath("//div[@id='data3_info']").text != tt:
                    break
                else:
                    if err == 3100:
                        print("下一页等待错误，点页数")
                        browser.find_element_by_link_text(f"{page+1}").click()
                        err = 0                    
                    err += 1        
        page += 1


try:
    crawler() 
except:
    #发生异常的话重新执行crawler
    print ("异常")
    print("重找")
    crawler()  

a = pd.concat(list,ignore_index=True)
#检查是否重复抓取
repeat = a[a.duplicated(keep = False)]  
#清除重复值
a.drop_duplicates(inplace = True)
#清除冗字及空格
a["状态"] = a["状态"].apply(lambda x : x.lstrip("通过|拒绝"))
a["状态"] = a["状态"].apply(lambda x : x.lstrip())

#将账号list转成DataFrame
b=pd.DataFrame(idlist)

#以\n切割字串
b["1"] = b[0].str.split("\n")

#获取list第0个元素(账号)
b["账号"] = b["1"].apply(lambda x : x[0])

#复制到表格
a["账号"]=b["账号"]

#检查笔数是否正确
if len(a) != count:
    print("\033[1;31m资料笔数不正确，注意是否重复值\033[0m")
    
#会出Excel    
result = r"C:\Users\User\Desktop\\"
wb = pd.ExcelWriter(result + '活动历史 {}.xlsx'.format(ynote))
a.to_excel(wb,index = False,sheet_name="活动历史")
#若无重复记录，不汇出重复
if len(repeat) != 0:
    repeat.to_excel(wb,index = False,sheet_name="重复记录")
wb.save()
